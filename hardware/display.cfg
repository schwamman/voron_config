#####################################################################
#   Displays
#####################################################################
[output_pin beeper]
pin: EXP1_1
pwm: True
value: 0
shutdown_value: 0
cycle_time: 0.001
scale: 1

[display]
#  mini12864 LCD Display
lcd_type: uc1701
cs_pin: EXP1_3
a0_pin: EXP1_4
rst_pin: EXP1_5
encoder_pins: ^EXP2_5, ^EXP2_3
click_pin: ^!EXP1_2
contrast: 63
spi_software_miso_pin: EXP2_1
spi_software_mosi_pin: EXP2_6
spi_software_sclk_pin: EXP2_2

[neopixel btt_mini12864]
#  To control Neopixel RGB in mini12864 display
pin: EXP1_6
chain_count: 3
initial_RED: 0
initial_GREEN: 0
initial_BLUE: 0.3
color_order: RGB

#  Set RGB values on boot up for each Neopixel. 
#  Index 1 = display, Index 2 and 3 = Knob
[delayed_gcode setdisplayneopixel]
initial_duration: 1
gcode:
       SET_LED LED=btt_mini12864 RED=0 GREEN=.1 BLUE=0 INDEX=1 TRANSMIT=0
       SET_LED LED=btt_mini12864 RED=0 GREEN=.1 BLUE=0 INDEX=2 TRANSMIT=0
       SET_LED LED=btt_mini12864 RED=0 GREEN=.1 BLUE=0 INDEX=3 



#####################################################################
#  Template
#####################################################################
[display_template _run_time]
text:
  {% set heat_soak = printer['gcode_macro HEATSOAK_BED'] %}
  {% if heat_soak.stage in ["heating", "staging"] %}
    {% set rtime = heat_soak.total_time_elapsed %}
    {"%02d:%02d" % (rtime // (60 * 60), (rtime // 60) % 60) }
  {% else %}
    {% set rtime = printer.idle_timeout.printing_time %}
    {"%02d:%02d" % (rtime // (60 * 60), (rtime // 60) % 60) }
  {% endif %}

# [display_template _progress_percent]
# text:
#   {% set heat_soak = printer['gcode_macro HEATSOAK_BED'] %}
#   {% if heat_soak.stage in ["heating", "staging"] %}
#     {% set soak_progress = heat_soak.total_time_elapsed /  (heat_soak.total_time_elapsed + heat_soak.soak_time_remaining) %}
#     { "{:^10.0%}".format(soak_progress) }
#   {% else %}
#     { "{:^10.0%}".format(printer.display_status.progress) }
#   {% endif %}

# [display_template _progress_bar]
# text:
#   {% set heat_soak = printer['gcode_macro HEATSOAK_BED'] %}
#   {% if heat_soak.stage in ["heating", "staging"] %}
#     {% set soak_progress = heat_soak.total_time_elapsed /  (heat_soak.total_time_elapsed + heat_soak.soak_time_remaining) %}
#     { draw_progress_bar(2, 0, 10, soak_progress) }
#   {% else %}
#     { draw_progress_bar(2, 0, 10, printer.display_status.progress) }
#   {% endif %}

[display_data _default_16x4 printing_time]
position: 2, 10
text: { "%6s" % (render("_run_time").strip(),) }

[display_data _default_16x4 print_progress]
position: 2, 0
text: { "{:^10.0%}".format(printer.display_status.progress) }

[display_data _default_16x4 progress_bar]
position: 2, 1 # Draw graphical progress bar after text is written
text: { draw_progress_bar(2, 0, 10, printer.display_status.progress) }


#####################################################################
#   Menu
#####################################################################
[menu __main __macros]
type: list
name: Macros

[menu __main __macros __heatsoak]
type: list
name: Heatsoak Bed

[menu __main __macros __heatsoak __abs]
type: input
name: ABS: {menu.input} Min
enable: {not printer.idle_timeout.state == "Printing"}
input: 60
input_max: 120
input_min: 15
input_step: 15
gcode:
       HEATSOAK_BED TEMP=110 SOAKTIME={menu.input}

[menu __main __macros __clean_nozzle]
type: command
name: Clean Nozzle
gcode:
       CLEAN_NOZZLE

[menu __main __macros __purge]
type: command
name: Purge Nozzle
gcode:
       PURGE

[menu __main __macros __park]
type: command
name: Park Nozzle
gcode:
       PARK